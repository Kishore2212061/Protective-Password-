{"ast":null,"code":"// utils/generatePassword.js\nfunction generateDynamicPassword(username, uniqueValue, fixedValue, currentHour, keyValue, trigFunction) {\n  const digitSum = username.split('').reduce((sum, char) => sum + (isNaN(char) ? 0 : parseInt(char, 10)), 0); // Calculate the sum of digits in the username\n\n  // Calculate angle based on hour and keyValue\n  const angle = currentHour - keyValue;\n  let trigResult;\n  switch (trigFunction) {\n    case 'sin':\n      trigResult = Math.sin(angle);\n      break;\n    case 'cos':\n      trigResult = Math.cos(angle);\n      break;\n    case 'tan':\n      trigResult = Math.tan(angle);\n      break;\n    default:\n      trigResult = Math.sin(angle);\n    // Default to sin if no valid function provided\n  }\n\n  // Calculate the final dynamic password value\n  const calculatedPassword = digitSum * uniqueValue * Math.sin(fixedValue) * trigResult;\n  return calculatedPassword.toFixed(3); // Return 3 decimal places\n}\nmodule.exports = generateDynamicPassword;","map":{"version":3,"names":["generateDynamicPassword","username","uniqueValue","fixedValue","currentHour","keyValue","trigFunction","digitSum","split","reduce","sum","char","isNaN","parseInt","angle","trigResult","Math","sin","cos","tan","calculatedPassword","toFixed","module","exports"],"sources":["C:/Users/kishore/demo/client/src/generatePassword.js"],"sourcesContent":["// utils/generatePassword.js\r\nfunction generateDynamicPassword(username, uniqueValue, fixedValue, currentHour, keyValue, trigFunction) {\r\n    const digitSum = username.split('').reduce((sum, char) => sum + (isNaN(char) ? 0 : parseInt(char, 10)), 0); // Calculate the sum of digits in the username\r\n\r\n    // Calculate angle based on hour and keyValue\r\n    const angle = currentHour - keyValue;\r\n\r\n    let trigResult;\r\n    switch (trigFunction) {\r\n        case 'sin':\r\n            trigResult = Math.sin(angle);\r\n            break;\r\n        case 'cos':\r\n            trigResult = Math.cos(angle);\r\n            break;\r\n        case 'tan':\r\n            trigResult = Math.tan(angle);\r\n            break;\r\n        default:\r\n            trigResult = Math.sin(angle); // Default to sin if no valid function provided\r\n    }\r\n\r\n    // Calculate the final dynamic password value\r\n    const calculatedPassword = digitSum * uniqueValue * Math.sin(fixedValue) * trigResult;\r\n    return calculatedPassword.toFixed(3); // Return 3 decimal places\r\n}\r\n\r\nmodule.exports = generateDynamicPassword;\r\n"],"mappings":"AAAA;AACA,SAASA,uBAAuBA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,YAAY,EAAE;EACrG,MAAMC,QAAQ,GAAGN,QAAQ,CAACO,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIE,KAAK,CAACD,IAAI,CAAC,GAAG,CAAC,GAAGE,QAAQ,CAACF,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;EAE5G;EACA,MAAMG,KAAK,GAAGV,WAAW,GAAGC,QAAQ;EAEpC,IAAIU,UAAU;EACd,QAAQT,YAAY;IAChB,KAAK,KAAK;MACNS,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC;MAC5B;IACJ,KAAK,KAAK;MACNC,UAAU,GAAGC,IAAI,CAACE,GAAG,CAACJ,KAAK,CAAC;MAC5B;IACJ,KAAK,KAAK;MACNC,UAAU,GAAGC,IAAI,CAACG,GAAG,CAACL,KAAK,CAAC;MAC5B;IACJ;MACIC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC;IAAE;EACtC;;EAEA;EACA,MAAMM,kBAAkB,GAAGb,QAAQ,GAAGL,WAAW,GAAGc,IAAI,CAACC,GAAG,CAACd,UAAU,CAAC,GAAGY,UAAU;EACrF,OAAOK,kBAAkB,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,OAAO,GAAGvB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}