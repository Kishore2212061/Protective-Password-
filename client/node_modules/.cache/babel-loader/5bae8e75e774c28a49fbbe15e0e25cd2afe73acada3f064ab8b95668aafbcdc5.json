{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs, addDoc, deleteDoc, doc, onSnapshot, query, where, updateDoc, orderBy, limit } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBRyD13NVkMGCWeH8VgLoyFWJAyTBNgWXk\",\n  authDomain: \"project77-ee8af.firebaseapp.com\",\n  databaseURL: \"https://project77-ee8af-default-rtdb.firebaseio.com\",\n  projectId: \"project77-ee8af\",\n  storageBucket: \"project77-ee8af.appspot.com\",\n  messagingSenderId: \"902108403182\",\n  appId: \"1:902108403182:web:e2abcacfdbd4e25e332aff\",\n  measurementId: \"G-W2JE41ZB1R\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore();\nconst colref = collection(db, 'movieBookings');\nconst appendBookingRow = booking => {\n  const tableBody = document.getElementById('bookingTableBody');\n  const row = document.createElement('tr');\n  const movieNameCell = document.createElement('td');\n  movieNameCell.textContent = booking.MovieName;\n  const bookingIdCell = document.createElement('td');\n  bookingIdCell.textContent = booking.BookingId;\n  const ratingCell = document.createElement('td');\n  ratingCell.textContent = booking.Rating;\n\n  // Append cells to row\n  row.appendChild(movieNameCell);\n  row.appendChild(bookingIdCell);\n  row.appendChild(ratingCell);\n\n  // Append row to table body\n  tableBody.appendChild(row);\n};\n\n// Real-time listener for Firestore collection\nconst q = query(colref, limit(3));\nonSnapshot(q, snapshot => {\n  const tableBody = document.getElementById('bookingTableBody');\n  tableBody.innerHTML = ''; // Clear the table before re-adding all data\n\n  snapshot.docs.forEach(doc => {\n    appendBookingRow(doc.data()); // Display all the bookings in real-time\n  });\n  calculateAverageRating(snapshot);\n});\n\n// Get Total Number of Documents in Collection\ngetDocs(colref).then(snapshot => {\n  let totalDocuments = snapshot.size; // Get total number of documents\n  console.log(`Total number of documents: ${totalDocuments}`);\n\n  // Display the total number of documents in the HTML page\n  const totalCountElement = document.getElementById('totalBookings');\n  totalCountElement.textContent = `Total Movie Bookings: ${totalDocuments}`;\n}).catch(err => {\n  console.log(err.message);\n});\n\n// Add Booking\nconst addform = document.querySelector('.add');\naddform.addEventListener('submit', e => {\n  e.preventDefault();\n  addDoc(colref, {\n    MovieName: addform.MovieName.value,\n    BookingId: addform.BookingId.value,\n    Rating: parseInt(addform.Rating.value)\n  }).then(() => {\n    addform.reset();\n  });\n});\n\n// Delete Booking\nconst deleteform = document.querySelector('.delete');\ndeleteform.addEventListener('submit', e => {\n  e.preventDefault();\n  const docref = doc(db, 'movieBookings', deleteform.BookingId.value);\n  deleteDoc(docref).then(() => {\n    deleteform.reset();\n  });\n});\nonSnapshot(q, snapshot => {\n  let movies = [];\n  snapshot.docs.forEach(doc => {\n    movies.push({\n      ...doc.data(),\n      id: doc.id\n    });\n  });\n  console.log(movies);\n});\nconst updateForm = document.querySelector('.update-rating');\nupdateForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const bookingId = updateForm.updateBookingId.value;\n  const newRating = parseInt(updateForm.updateRating.value);\n  if (isNaN(newRating) || newRating < 1 || newRating > 5) {\n    alert(\"Please enter a valid rating between 1 and 5.\");\n    return;\n  }\n  const docRef = doc(db, 'movieBookings', bookingId); // Reference the document by ID\n\n  // Update the rating field in Firestore\n  updateDoc(docRef, {\n    Rating: newRating\n  }).then(() => {\n    alert(\"Rating updated successfully!\");\n    updateForm.reset(); // Clear the form after updating\n  }).catch(err => {\n    console.log(\"Error updating rating:\", err.message);\n    alert(\"Failed to update rating. Please check the Booking ID.\");\n  });\n});\nconst calculateAverageRating = snapshot => {\n  let totalRating = 0;\n  let count = 0;\n  snapshot.docs.forEach(doc => {\n    const data = doc.data();\n    if (data.Rating) {\n      totalRating += data.Rating;\n      count++;\n    }\n  });\n  const averageRating = count > 0 ? (totalRating / count).toFixed(2) : 0;\n\n  // Display the average rating in the HTML page\n  const avgRatingElement = document.getElementById('averageRating');\n  avgRatingElement.textContent = `Average Rating: ${averageRating}`;\n};","map":{"version":3,"names":["initializeApp","getFirestore","collection","getDocs","addDoc","deleteDoc","doc","onSnapshot","query","where","updateDoc","orderBy","limit","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","colref","appendBookingRow","booking","tableBody","document","getElementById","row","createElement","movieNameCell","textContent","MovieName","bookingIdCell","BookingId","ratingCell","Rating","appendChild","q","snapshot","innerHTML","docs","forEach","data","calculateAverageRating","then","totalDocuments","size","console","log","totalCountElement","catch","err","message","addform","querySelector","addEventListener","e","preventDefault","value","parseInt","reset","deleteform","docref","movies","push","id","updateForm","bookingId","updateBookingId","newRating","updateRating","isNaN","alert","docRef","totalRating","count","averageRating","toFixed","avgRatingElement"],"sources":["C:/Users/kishore/demo/src/index.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getFirestore,collection,getDocs, addDoc,deleteDoc,doc, onSnapshot,query,where,updateDoc,orderBy,limit} from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBRyD13NVkMGCWeH8VgLoyFWJAyTBNgWXk\",\n  authDomain: \"project77-ee8af.firebaseapp.com\",\n  databaseURL: \"https://project77-ee8af-default-rtdb.firebaseio.com\",\n  projectId: \"project77-ee8af\",\n  storageBucket: \"project77-ee8af.appspot.com\",\n  messagingSenderId: \"902108403182\",\n  appId: \"1:902108403182:web:e2abcacfdbd4e25e332aff\",\n  measurementId: \"G-W2JE41ZB1R\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore();\nconst colref = collection(db, 'movieBookings');\n\nconst appendBookingRow = (booking) => {\n  const tableBody = document.getElementById('bookingTableBody');\n  const row = document.createElement('tr');\n\n  const movieNameCell = document.createElement('td');\n  movieNameCell.textContent = booking.MovieName;\n\n  const bookingIdCell = document.createElement('td');\n  bookingIdCell.textContent = booking.BookingId;\n\n  const ratingCell = document.createElement('td');\n  ratingCell.textContent = booking.Rating;\n\n  // Append cells to row\n  row.appendChild(movieNameCell);\n  row.appendChild(bookingIdCell);\n  row.appendChild(ratingCell);\n\n  // Append row to table body\n  tableBody.appendChild(row);\n};\n\n// Real-time listener for Firestore collection\nconst q = query(colref, limit(3));onSnapshot(q, (snapshot) => {\n  const tableBody = document.getElementById('bookingTableBody');\n  tableBody.innerHTML = '';  // Clear the table before re-adding all data\n\n  snapshot.docs.forEach(doc => {\n    appendBookingRow(doc.data());  // Display all the bookings in real-time\n  });\n  calculateAverageRating(snapshot);  \n});\n\n// Get Total Number of Documents in Collection\ngetDocs(colref)\n  .then((snapshot) => {\n    let totalDocuments = snapshot.size;  // Get total number of documents\n    console.log(`Total number of documents: ${totalDocuments}`);\n\n    // Display the total number of documents in the HTML page\n    const totalCountElement = document.getElementById('totalBookings');\n    totalCountElement.textContent = `Total Movie Bookings: ${totalDocuments}`;\n  })\n  .catch(err => {\n    console.log(err.message);\n  });\n\n// Add Booking\nconst addform = document.querySelector('.add');\naddform.addEventListener('submit', (e) => {\n  e.preventDefault();\n  addDoc(colref, {\n    MovieName: addform.MovieName.value,\n    BookingId: addform.BookingId.value,\n    Rating: parseInt(addform.Rating.value)\n  })\n    .then(() => {\n      addform.reset();\n    });\n});\n\n// Delete Booking\nconst deleteform = document.querySelector('.delete');\ndeleteform.addEventListener('submit', (e) => {\n  e.preventDefault();\n  const docref = doc(db, 'movieBookings', deleteform.BookingId.value);\n  deleteDoc(docref)\n    .then(() => {\n      deleteform.reset();\n    });\n});\n\n\nonSnapshot(q, (snapshot) => {\n  let movies = [];\n  snapshot.docs.forEach((doc) => {\n    movies.push({ ...doc.data(), id: doc.id });\n  });\n  console.log(movies);\n});\n\nconst updateForm = document.querySelector('.update-rating');\nupdateForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const bookingId = updateForm.updateBookingId.value;\n  const newRating = parseInt(updateForm.updateRating.value);\n\n  if (isNaN(newRating) || newRating < 1 || newRating > 5) {\n    alert(\"Please enter a valid rating between 1 and 5.\");\n    return;\n  }\n\n  const docRef = doc(db, 'movieBookings', bookingId); // Reference the document by ID\n\n  // Update the rating field in Firestore\n  updateDoc(docRef, { Rating: newRating })\n    .then(() => {\n      alert(\"Rating updated successfully!\");\n      updateForm.reset();  // Clear the form after updating\n    })\n    .catch(err => {\n      console.log(\"Error updating rating:\", err.message);\n      alert(\"Failed to update rating. Please check the Booking ID.\");\n    });\n});\n\nconst calculateAverageRating = (snapshot) => {\n  let totalRating = 0;\n  let count = 0;\n\n  snapshot.docs.forEach(doc => {\n    const data = doc.data();\n    if (data.Rating) {\n      totalRating += data.Rating;\n      count++;\n    }\n  });\n\n  const averageRating = count > 0 ? (totalRating / count).toFixed(2) : 0;\n\n  // Display the average rating in the HTML page\n  const avgRatingElement = document.getElementById('averageRating');\n  avgRatingElement.textContent = `Average Rating: ${averageRating}`;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}