{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs, addDoc, deleteDoc, doc, onSnapshot, query, where, updateDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBRyD13NVkMGCWeH8VgLoyFWJAyTBNgWXk\",\n  authDomain: \"project77-ee8af.firebaseapp.com\",\n  databaseURL: \"https://project77-ee8af-default-rtdb.firebaseio.com\",\n  projectId: \"project77-ee8af\",\n  storageBucket: \"project77-ee8af.appspot.com\",\n  messagingSenderId: \"902108403182\",\n  appId: \"1:902108403182:web:e2abcacfdbd4e25e332aff\",\n  measurementId: \"G-W2JE41ZB1R\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore();\nconst colref = collection(db, 'movieBookings');\nconst appendBookingRow = booking => {\n  const tableBody = document.getElementById('bookingTableBody');\n  const row = document.createElement('tr');\n  const movieNameCell = document.createElement('td');\n  movieNameCell.textContent = booking.MovieName;\n  const bookingIdCell = document.createElement('td');\n  bookingIdCell.textContent = booking.BookingId;\n  const ratingCell = document.createElement('td');\n  ratingCell.textContent = booking.Rating;\n\n  // Append cells to row\n  row.appendChild(movieNameCell);\n  row.appendChild(bookingIdCell);\n  row.appendChild(ratingCell);\n\n  // Append row to table body\n  tableBody.appendChild(row);\n};\n\n// Real-time listener for Firestore collection\nonSnapshot(colref, snapshot => {\n  const tableBody = document.getElementById('bookingTableBody');\n  tableBody.innerHTML = ''; // Clear the table before re-adding all data\n\n  snapshot.docs.forEach(doc => {\n    appendBookingRow(doc.data()); // Display all the bookings in real-time\n  });\n});\ngetDocs(colref).then(snapshot => {\n  let bookings = [];\n  snapshot.docs.forEach(doc => {\n    bookings.push({\n      ...doc.data(),\n      id: doc.id\n    });\n  });\n  console.log(bookings);\n}).catch(err => {\n  console.log(err.message);\n});\n\n// Add Booking\nconst addform = document.querySelector('.add');\naddform.addEventListener('submit', e => {\n  e.preventDefault();\n  addDoc(colref, {\n    MovieName: addform.MovieName.value,\n    BookingId: addform.BookingId.value,\n    Rating: parseInt(addform.Rating.value)\n  }).then(() => {\n    addform.reset();\n  });\n});\n\n// Delete Booking\nconst deleteform = document.querySelector('.delete');\ndeleteform.addEventListener('submit', e => {\n  e.preventDefault();\n  const docref = doc(db, 'movieBookings', deleteform.BookingId.value);\n  deleteDoc(docref).then(() => {\n    deleteform.reset();\n  });\n});\n\n// Query example: Get movies with rating >= 4\n// const q = query(colref, where(\"Rating\", \">=\", 4));\n// onSnapshot(q, (snapshot) => {\n//   let movies = [];\n//   snapshot.docs.forEach((doc) => {\n//     movies.push({ ...doc.data(), id: doc.id });\n//   });\n//   console.log(movies);\n// });\n\nconst updateForm = document.querySelector('.update-rating');\nupdateForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const bookingId = updateForm.updateBookingId.value;\n  const newRating = parseInt(updateForm.updateRating.value);\n  if (isNaN(newRating) || newRating < 1 || newRating > 5) {\n    alert(\"Please enter a valid rating between 1 and 5.\");\n    return;\n  }\n  const docRef = doc(db, 'movieBookings', bookingId); // Reference the document by ID\n\n  // Update the rating field in Firestore\n  updateDoc(docRef, {\n    Rating: newRating\n  }).then(() => {\n    alert(\"Rating updated successfully!\");\n    updateForm.reset(); // Clear the form after updating\n  }).catch(err => {\n    console.log(\"Error updating rating:\", err.message);\n    alert(\"Failed to update rating. Please check the Booking ID.\");\n  });\n});","map":{"version":3,"names":["initializeApp","getFirestore","collection","getDocs","addDoc","deleteDoc","doc","onSnapshot","query","where","updateDoc","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","colref","appendBookingRow","booking","tableBody","document","getElementById","row","createElement","movieNameCell","textContent","MovieName","bookingIdCell","BookingId","ratingCell","Rating","appendChild","snapshot","innerHTML","docs","forEach","data","then","bookings","push","id","console","log","catch","err","message","addform","querySelector","addEventListener","e","preventDefault","value","parseInt","reset","deleteform","docref","updateForm","bookingId","updateBookingId","newRating","updateRating","isNaN","alert","docRef"],"sources":["C:/Users/kishore/demo/src/index.js"],"sourcesContent":["\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore,collection,getDocs, addDoc,deleteDoc,doc, onSnapshot,query,where,updateDoc} from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBRyD13NVkMGCWeH8VgLoyFWJAyTBNgWXk\",\n  authDomain: \"project77-ee8af.firebaseapp.com\",\n  databaseURL: \"https://project77-ee8af-default-rtdb.firebaseio.com\",\n  projectId: \"project77-ee8af\",\n  storageBucket: \"project77-ee8af.appspot.com\",\n  messagingSenderId: \"902108403182\",\n  appId: \"1:902108403182:web:e2abcacfdbd4e25e332aff\",\n  measurementId: \"G-W2JE41ZB1R\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore();\nconst colref = collection(db, 'movieBookings');\n\nconst appendBookingRow = (booking) => {\n  const tableBody = document.getElementById('bookingTableBody');\n  const row = document.createElement('tr');\n\n  const movieNameCell = document.createElement('td');\n  movieNameCell.textContent = booking.MovieName;\n\n  const bookingIdCell = document.createElement('td');\n  bookingIdCell.textContent = booking.BookingId;\n\n  const ratingCell = document.createElement('td');\n  ratingCell.textContent = booking.Rating;\n\n  // Append cells to row\n  row.appendChild(movieNameCell);\n  row.appendChild(bookingIdCell);\n  row.appendChild(ratingCell);\n\n  // Append row to table body\n  tableBody.appendChild(row);\n};\n\n// Real-time listener for Firestore collection\nonSnapshot(colref, (snapshot) => {\n  const tableBody = document.getElementById('bookingTableBody');\n  tableBody.innerHTML = '';  // Clear the table before re-adding all data\n\n  snapshot.docs.forEach(doc => {\n    appendBookingRow(doc.data());  // Display all the bookings in real-time\n  });\n});\n\ngetDocs(colref)\n  .then((snapshot) => {\n    let bookings = [];\n    snapshot.docs.forEach((doc) => {\n      bookings.push({ ...doc.data(), id: doc.id });\n    });\n    console.log(bookings);\n  })\n  .catch(err => {\n    console.log(err.message);\n  });\n\n// Add Booking\nconst addform = document.querySelector('.add');\naddform.addEventListener('submit', (e) => {\n  e.preventDefault();\n  addDoc(colref, {\n    MovieName: addform.MovieName.value,\n    BookingId: addform.BookingId.value,\n    Rating: parseInt(addform.Rating.value)\n  })\n    .then(() => {\n      addform.reset();\n    });\n});\n\n// Delete Booking\nconst deleteform = document.querySelector('.delete');\ndeleteform.addEventListener('submit', (e) => {\n  e.preventDefault();\n  const docref = doc(db, 'movieBookings', deleteform.BookingId.value);\n  deleteDoc(docref)\n    .then(() => {\n      deleteform.reset();\n    });\n});\n\n// Query example: Get movies with rating >= 4\n// const q = query(colref, where(\"Rating\", \">=\", 4));\n// onSnapshot(q, (snapshot) => {\n//   let movies = [];\n//   snapshot.docs.forEach((doc) => {\n//     movies.push({ ...doc.data(), id: doc.id });\n//   });\n//   console.log(movies);\n// });\n\nconst updateForm = document.querySelector('.update-rating');\nupdateForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const bookingId = updateForm.updateBookingId.value;\n  const newRating = parseInt(updateForm.updateRating.value);\n\n  if (isNaN(newRating) || newRating < 1 || newRating > 5) {\n    alert(\"Please enter a valid rating between 1 and 5.\");\n    return;\n  }\n\n  const docRef = doc(db, 'movieBookings', bookingId); // Reference the document by ID\n\n  // Update the rating field in Firestore\n  updateDoc(docRef, { Rating: newRating })\n    .then(() => {\n      alert(\"Rating updated successfully!\");\n      updateForm.reset();  // Clear the form after updating\n    })\n    .catch(err => {\n      console.log(\"Error updating rating:\", err.message);\n      alert(\"Failed to update rating. Please check the Booking ID.\");\n    });\n});\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}